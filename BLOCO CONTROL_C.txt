

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                   Conversor Paralelo Híbrido                           %
%                     	    Nataniel Rigo                                %
%                            Versão 3.0                                  %
%                          Data: 2022                                    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% erro_conv é o erro da saída do controlador PI já multiplicado pelo Percentual_I
% erro_I é o valor do erro que será comparado com a histerese já com todos os percentuais
% out1_conv1 é a saída de pulso da chave de cima
% out0_conv1 é a saída de pulso da chave de baixo
% Percentual_I é o valor percentual de 0 a 100 que o conversor processa
% Limite_ABS_I é o limite absoluto de corrente do conversor
% nivel_compara_hist1 é o valor do nível de comparação para a histerese
% erro_total é o erro da saída do controlador PI
% Nível_Faixa_habilitada é um nível lógico que habilita ou não a faixa de corrente de atuação
% Habilita_desl_hist é um nível lógico que habilita ou não o deslocamento da histerese 0 a +x para valores positivos e -x a 0 para valores negativos
% Corrente_conv1 é o valor medido da saída do conversor
% out_erro_processado é o erro_I que é o valor que vai ser comparado mesmo
% Variáveis de entrada Conversão A/D - erros e limites/niveis
 
*/

float  percentual1, limiteAbs1, nivelComp1, erroTotal1, nivelFaixa1, habilitaHist1,correnteCov1; 
float erro_conv1, erro_I_1;
static int out_H_conv1;
static int out_L_conv1;

percentual1 = x1;
limiteAbs1 = x2;
nivelComp1 = x3;
erroTotal1= x4;
nivelFaixa1 = x5;
habilitaHist1 = x6;
correnteCov1 = x7;


erro_conv1 = (percentual1 * 0.01) * erroTotal1;

if(erro_conv1 > limiteAbs1) erro_conv1 = limiteAbs1; 

if (erro_conv1 < -limiteAbs1) erro_conv1 = -limiteAbs1;

erro_I_1 = erro_conv1-correnteCov1;


if (((erroTotal1 >= nivelFaixa1) || (erroTotal1 <= -nivelFaixa1)))
   {
    if (habilitaHist1<1)
	{
        if (erro_I_1 > nivelComp1)
	   {
            out_H_conv1=1;
            out_L_conv1=0;
            }
        if (erro_I_1 < -nivelComp1)
            {
	    out_H_conv1=0;
            out_L_conv1=1;
            }
       }
    if (habilitaHist1>=1)
	{
        if (erroTotal1 > 0)
	    {
            if (erro_I_1 > nivelComp1)
               {
	        out_H_conv1=1;
                out_L_conv1=0;
               }
            if (erro_I_1 < 0)
                {
		out_H_conv1=0;
                out_L_conv1=1;
                }
            }
        if (erroTotal1 < 0)
	   {
            if (erro_I_1 > 0)
		{
                out_H_conv1=1;
                out_L_conv1=0;
                }
            if (erro_I_1 < -nivelComp1)
		{
                out_H_conv1=0;
                out_L_conv1=1;
                }
           }
	}
    }


else

if ((erroTotal1 < nivelFaixa1) && (erroTotal1 > -nivelFaixa1))
	{
    	out_H_conv1=0;
    	out_L_conv1=0;
     	}




%y1 = out_H_conv1;
%y2 = out_L_conv1;

%y3 = erro_I_1;
%y4 = erro_conv1;
%y5 = correnteCov1;
%y6 = erroTotal1;
%y7 =  nivelComp1;



